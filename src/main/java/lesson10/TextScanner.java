package lesson10;
/*
OVERLOADING - перегрузка методов, часть полиморфизма
Перегрузка метода означает создание другого метода с тем же именем в том же классе, но с другим списком параметров.
методы с одним и тем же именем, но с разными типами и/или количеством параметров.

Ключевые правила перегрузки методов
- Перегруженные и перегружаемые методы должны находиться в одном классе
  (Примечание: сюда относятся любые методы, унаследованные, даже неявно, от суперкласса).
- Параметры метода должны измениться: либо количество, либо тип параметров должны быть разными в двух методах.
- Тип возвращаемого значения может быть свободно изменен.
- Модификатор доступа (public, private и другие) можно свободно изменять.
- Выброшенные исключения, если таковые имеются, могут быть свободно изменены.

Основная цель перегрузки метода — изменить список его параметров, чтобы реализовать другое поведение на основе переданных ему аргументов.
Переопределение, с другой стороны, относится к реализации того же метода с тем же списком параметров в подклассе,
чтобы адаптировать его поведение к потребностям подкласса.
*/

// файл должен называться точно так же как и публичный класс
// публичный класс в файле может быть только один
public class TextScanner {

    //метод сканирования книги
    public String scan(Book book) {
        String text = "";
        for (Page p : book.pages){
            text += p.text;
        }
        return text;
    }

    //метод сканирования страницы
    public String scan (Page page){
        return page.text;
    }

    //метод сканирования строки с выбрасыванием исключения
    //этот метод джава тоже разрешит вызвать, хотя и будет ошибка
    public String scan (String s){
        throw new RuntimeException();
    }

    public static void main(String[] args) {
        Page p1 = new Page("This\nis\npage 1");
        Page p2 = new Page("This\nis\npage 2");
        Page p3 = new Page("This\nis\npage 3");

        Book book = new Book(new Page[]{p1, p3});

        TextScanner scanner = new TextScanner();
        System.out.println(scanner.scan(book)); //вызов метода с аргументом типа Book
        System.out.println(scanner.scan(p2));   //вызов метода с аргументом типа Page
        // System.out.println(scanner.scan(""));

    }
}

//еще один класс в том же файле
class Page {
    final String text;

    Page(String text) {
        this.text = text;
    }
}

//еще один класс в том же файле
class Book {
    final Page[] pages;

    Book(Page[] pages) {
        this.pages = pages;
    }
}
